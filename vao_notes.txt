My VAO Quad

#ifdef QUAD
		// Quad
		float x0 = -5;
		float x1 = 5.f;
		float y0 = -4.f;
		float y1 = 4.f;
		Vec3 m_points[] =
		{
			{ x0, y0, 0 }, { x1, y0, 0 }, { x1, y1, 0 }, 
			{ x0, y0, 0 }, { x1, y1, 0 }, { x0, y1, 0 }
		};

		// no need, once we use the right shader
		Vec3 n { 0, 0, 1.f};
		Vec3 m_norms[] = { n, n, n, n, n, n };

		Vec2 m_uvs[] =
		{
			{ 0, 0 }, { 1, 0 }, { 1, 1 },
			{ 0, 0 }, { 1, 1 }, { 0, 1 }
		};

		GL_CHECK(glGenVertexArrays(1, &vao));
		GL_CHECK(glBindVertexArray(vao));

		GL_CHECK(glGenBuffers(1, &points_vbo));
		GL_CHECK(glBindBuffer(GL_ARRAY_BUFFER, points_vbo));
		GL_CHECK(glBufferData(GL_ARRAY_BUFFER, 6 * sizeof(Vec3), m_points, GL_STATIC_DRAW));
		GL_CHECK(glEnableVertexAttribArray(0));
		GL_CHECK(glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, NULL));

		GL_CHECK(glGenBuffers(1, &norms_vbo));
		GL_CHECK(glBindBuffer(GL_ARRAY_BUFFER, norms_vbo));
		GL_CHECK(glBufferData(GL_ARRAY_BUFFER, 6 * sizeof(Vec3), m_norms, GL_STATIC_DRAW));
		GL_CHECK(glEnableVertexAttribArray(1));
		GL_CHECK(glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, NULL));

		GL_CHECK(glGenBuffers(1, &uvs_vbo));
		GL_CHECK(glBindBuffer(GL_ARRAY_BUFFER, uvs_vbo));
		GL_CHECK(glBufferData(GL_ARRAY_BUFFER, 6 * sizeof(Vec2), m_uvs, GL_STATIC_DRAW));
		GL_CHECK(glEnableVertexAttribArray(2));
		GL_CHECK(glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 0, NULL));
#endif // QUAD

#ifdef QUAD
		// TODO TEMP TEST 
		// Trying to get texture set on shader
		int shaderId;
		GL_CHECK(glGetIntegerv(GL_CURRENT_PROGRAM, &shaderId));
		GL_CHECK(GLint loc = glGetUniformLocation(shaderId, "Texture0"));
		GL_CHECK(glUniform1i(loc, 0));

		GL_CHECK(glBindVertexArray(vao));
		GL_CHECK(GL_CHECK(glDrawArrays(GL_TRIANGLES, 0, 6)));

		GL_CHECK(glBindVertexArray(0)); // right?

#endif // QUAD







