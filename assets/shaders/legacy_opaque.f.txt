// -----------------------------------------------------------------------------
// glboiler - Jason Colman 2016-2017 - OpenGL experiments
// -----------------------------------------------------------------------------
// Opaque pass.
// Draw opaque meshes, using a shadow map.
// Fragment shader
// -----------------------------------------------------------------------------

////#define YES_PCF
//#define VIEW_NORMALS
//#define VIEW_NORMAL_MAP
//#define VIEW_TANGENTS
//#define VIEW_SPEC_MAP


// TODO get rid of this stuff, not used here.
uniform sampler2D diffuse_map;
uniform sampler2D shadow_map;
uniform sampler2D normal_map;
uniform sampler2D specular_map;

uniform int shadow_map_size; // in case textureSize() not available

varying vec4 v_pos;
varying vec2 v_uv;
varying vec3 v_normal;
varying vec3 v_tangent;
varying vec4 v_shadow_coord;

void main()
{
  vec3 normal = normalize(v_normal);
  vec3 tangent = normalize(v_tangent);

  vec4 shadow_coords = v_shadow_coord / v_shadow_coord.w; 

  // Bias: TODO adjust based on normal
  shadow_coords.z += 0.005;

#ifdef YES_PCF

  // PCF
  // TODO Hardware pcf
  float shadow = 0.0;
  // Texture size. Can only use textureSize() in OpenGL 4 :(
  float texel_size = 1.0 / float(shadow_map_size);
 
  for(int x = -1; x <= 1; ++x)
  {
    for(int y = -1; y <= 1; ++y)
    {
      float depth = texture2D(shadow_map, shadow_coords.xy + vec2(x, y) * texel_size).r; 
      shadow += depth < shadow_coords.z ? 0.2 : 0.8;        
    }    
  }
  shadow /= 9.0;

#else // YES_PCF

  // No PCF
  float depth = texture2D(shadow_map, shadow_coords.st).z;
  float shadow = 1.0;
  if (v_shadow_coord.w > 0.0)
    shadow = depth < shadow_coords.z ? 0.2 : .8;

#endif // YES_PCF

  vec3 light_dir = normalize(vec3(1, 1, 1));
  float n_dot_l = max(0.0, dot(light_dir, normal));

  vec4 diffuse_tex_colour = texture2D(diffuse_map, v_uv);

  float n = shadow * n_dot_l + 0.5; 

  vec4 final_colour = vec4(diffuse_tex_colour.r * n, diffuse_tex_colour.g * n, diffuse_tex_colour.b * n, diffuse_tex_colour.a);

#ifdef VIEW_NORMALS
  final_colour = final_colour * 0.0001 + vec4(normal * 0.5 + vec3(0.5), 1.0);
#endif

#ifdef VIEW_TANGENTS
  final_colour = final_colour * 0.0001 + vec4(tangent * 0.5 + vec3(0.5), 1.0);
#endif

#ifdef VIEW_NORMAL_MAP
  final_colour = final_colour * 0.0001 + texture2D(normal_map, v_uv);
#endif

#ifdef VIEW_SPEC_MAP
  final_colour = final_colour * 0.0001 + texture2D(specular_map, v_uv);
#endif

  gl_FragColor = final_colour;
}


