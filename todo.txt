Sort nodes before drawing!
Use insertion sort, exploit coherence.
Sort by shader, then z-dist?

Dither transparency!
Uses dither shader, opacity value is 0..1. We get noise value for frag, and 
compare with opacity, discard if less, say.

Use same dither for shadows, so translucent meshes write to fewer texels in
 shadow map. Very similar to meshes with an alpha channel, which we also use
 to discard shadow map fragments.


Have mesh class, obj_mesh populates mesh (subclass?)
 - mesh has vao, saves/loads binary. 

Mouse camera rotate (HMD move in HMD build)
Keys (joystick?) to move eye position

MD3 dragon walks around?

Cartoony/paper cut out 'grass' - big terrain with all effects but non-realistic style.



Try dither transparency


Set bit field on each node to set passes in which it is rendered
DONE

Split rendering into "only once" and "once or more" - so we only render shadow
 maps once, then render the scene twice, once for each eye.
 Could use the begin/render/end 3 funcs

Node type: Procedural sky (just a dome but with special shader), with render 
  flags set so we only render in opaque pass

water - like screen space refls?
reflections

My Heads - with different materials

Deferred renderer
 - Show any of the G buffer layers in main view? Or just as mini views.

Renderer: use "policies"? We want to mix and match:
 - Thread-safe/multithreaded -> message queue
 - Forward/deferred: these are 2 subclasses of renderer base class
 - Mono/stereo: have the idea of rendering one view, then the final render is comprised of 1 or more views.

Turn on and off features to trade off performance for quality.
 - PCSS for best shadows, then PCF, then no filtering? Lightmaps
 - Normal mapping/parallax displacement mapping -> calc tangents

Other features
 - Build lightmaps once at load time
 - Conditioning pass: binarify assets
 - GPU/CPU skinning
 - Different vertex types?

Render flags, so we can just render depth, etc - don't do unnecessary stuff for depth pass etc.

Geom classes
Matrix: mat3, mat4, vec3
Frustum
Quat
Transform: use RST and mat4, dirty flag

Graph traversal: does traversal algo make any difference?

Basic functionality:
Render depth to texture
Render colour to texture: MRTs.

Load/compile shader. We want to be able to reload any time.
Load/draw mesh
Load texture
Animation

Frame time
Each feature separately timed. Have a stack of timers, so we can show % of parent task. Create timer on stack, ctor/dtor add/remove from stack.

GFX features
 - Reflection probes
 - Screen space reflection, vs geometry-based reflection plane


Parallax Occlusion Mapping: POM

https://www.gamedev.net/resources/_/technical/graphics-programming-and-theory/a-closer-look-at-parallax-occlusion-mapping-r3262


